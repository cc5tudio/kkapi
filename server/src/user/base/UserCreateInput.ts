/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccountCreateNestedManyWithoutUsersInput } from "./AccountCreateNestedManyWithoutUsersInput";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsInt,
} from "class-validator";
import { Type } from "class-transformer";
import { CardCreateNestedManyWithoutUsersInput } from "./CardCreateNestedManyWithoutUsersInput";
import { UserCreateNestedManyWithoutUsersInput } from "./UserCreateNestedManyWithoutUsersInput";
import { FundingSourceWhereUniqueInput } from "../../fundingSource/base/FundingSourceWhereUniqueInput";
import { GoalCreateNestedManyWithoutUsersInput } from "./GoalCreateNestedManyWithoutUsersInput";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { TaskCreateNestedManyWithoutUsersInput } from "./TaskCreateNestedManyWithoutUsersInput";
import { TransactionCreateNestedManyWithoutUsersInput } from "./TransactionCreateNestedManyWithoutUsersInput";
@InputType()
class UserCreateInput {
  @ApiProperty({
    required: false,
    type: () => AccountCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => AccountCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => AccountCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  accounts?: AccountCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  birthdate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => CardCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => CardCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => CardCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  cards?: CardCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => UserCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => UserCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => UserCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  children?: UserCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  depositLink?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  email!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName?: string | null;

  @ApiProperty({
    required: false,
    type: () => FundingSourceWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => FundingSourceWhereUniqueInput)
  @IsOptional()
  @Field(() => FundingSourceWhereUniqueInput, {
    nullable: true,
  })
  fundingSource?: FundingSourceWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => GoalCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => GoalCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => GoalCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  goals?: GoalCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName?: string | null;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  parent?: UserWhereUniqueInput | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  password!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  photo?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  qrCode?: string | null;

  @ApiProperty({
    required: true,
    type: [String],
  })
  @IsString({
    each: true,
  })
  @Field(() => [String])
  roles!: Array<string>;

  @ApiProperty({
    required: false,
    type: () => TaskCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => TaskCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => TaskCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  tasks?: TaskCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => TransactionCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => TransactionCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => TransactionCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  transactions?: TransactionCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  username!: string;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  zipcode?: number | null;
}
export { UserCreateInput };
